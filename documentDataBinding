<apex:page showHeader="false" sidebar="false" applyBodyTag="false" 
           docType="html-5.0" lightningStylesheets="true" standardStylesheets="true" 
           controller="DocumentConfigApexController">
    <apex:includeLightning />

    <div class="main-wrapper">
        <div id="emailPopup" class="popup">
            <div class="popup-content">
                <span class="close" onclick="closeEmailPopup()">&times;</span>
                <h3>Send Document via Email</h3>
                <label for="emailTo">Send To:</label>
                <input type="email" id="emailTo" />
                <label for="emailSubject">Subject:</label>
                <input type="text" id="emailSubject" value="Your Document"/>
                <label for="emailBody">Body:</label>
                <textarea id="emailBody"></textarea>
                <button onclick="sendEmail()" class="send-email-btn">Send</button>
            </div>
        </div>
        <div style="text-align: center; margin: 10px;">
            <button onclick="handleSaveClick()" class="save-btn" style="padding: 10px 20px; font-size: 16px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; transition: background-color 0.3s;">
                Submit
            </button>
            <button onclick="openEmailPopup()" class="email-btn" style="padding: 10px 20px; font-size: 16px; background-color: #2196F3; color: white; border: none; border-radius: 5px; cursor: pointer; transition: background-color 0.3s;">
                Send by Email
            </button>
        </div>        
        <div style="display:flex;justify-content:center;">
            <h2>PDF Viewer with Field Mapping</h2>
        </div>  
        <div id="pdfContainer"></div> 
    </div>    

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@700&display=swap" rel="stylesheet"/>
    <script src="https://cdn.jsdelivr.net/npm/signature_pad"></script>
    
    <script>
         let pdfIdArray = [];
        document.addEventListener("DOMContentLoaded", function () {
            let pdfId = getParameterByName("pdfIds"); 
            let recordId = getParameterByName("recordIds");
     
            if (pdfId && recordId) {
             pdfIdArray = pdfId.split(",");  
            pdfIdArray.forEach(pdfId => {
              console.log('singlePdfid::>',pdfId);
              fetchPDFWithFields(pdfId.trim(), recordId);
        });
    } else {
        console.error("No PDF ID or Record ID provided.");
    }
        });
    
    function getParameterByName(name) {
        let url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        let regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        return results ? decodeURIComponent(results[2].replace(/\+/g, " ")) : null;
    }
    
    function fetchPDFWithFields(pdfId, recordId) {
        Visualforce.remoting.Manager.invokeAction(
            "{!$RemoteAction.DocumentConfigApexController.getPDFWithFields}",
            pdfId,
            recordId,
            function(result, event) {
                if (event.status) {
                    let data = JSON.parse(result);
                    let pdfData = window.atob(data.pdfData);
                    let configJson = JSON.parse(data.configJson);
                    console.log('configJSON::>',configJson);
                    let fieldValues = data.fieldValues;
                    localStorage.setItem(`pdfConfig_${pdfId}`, JSON.stringify(configJson));
                    renderPDF(pdfData, configJson, fieldValues);
                } else {
                    console.error("Error fetching PDF", event);
                }
            },
            { escape: false }
        );
    }
    
    async function renderPDF(pdfData, configJson, fieldValues) {
    const pdf = await pdfjsLib.getDocument({ data: pdfData }).promise;
    let pdfContainer = document.getElementById("pdfContainer");

    for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
        let page = await pdf.getPage(pageNum);
        let scale = 1.5;
        let viewport = page.getViewport({ scale });

        let pageContainer = document.createElement("div");
        pageContainer.classList.add("pdf-page");
        pageContainer.style.position = "relative";
        pageContainer.style.width = `${viewport.width}px`;
        pageContainer.style.height = `${viewport.height}px`;

        let canvas = document.createElement("canvas");
        canvas.width = viewport.width;
        canvas.height = viewport.height;
        canvas.classList.add("pdf-canvas");

        let context = canvas.getContext("2d");
        let renderContext = { canvasContext: context, viewport: viewport };

        pageContainer.appendChild(canvas);
        pdfContainer.appendChild(pageContainer);

        await page.render(renderContext).promise;

        let filteredFields = configJson.filter(field => field.pageNumber == pageNum);
        overlayFields(context, filteredFields, fieldValues, pageContainer);
    }
}

    
    function overlayFields(ctx, configJson, fieldValues, pageContainer) {
    ctx.fillStyle = "Blue";
    ctx.font = "18px Arial";
    ctx.textBaseline = "top";

    configJson.forEach(field => {
        let x = field.x;
        let y = field.y+5;
        let width = field.width || 150;
        let height = field.height || 50;
        let fieldName = field.fieldApiName;

      //  if (fieldName === 'Signature') {
       //     createSignatureCanvas(x, y, width, height, ctx, pageContainer);
       // }
       // else if(fieldName==="Date"){
        //    createDateInputField(x, y, width, height, fieldValues[fieldName] || "", pageContainer);
       // }
       // else if(fieldName === "Checkbox"){
       //     createCheckboxField(x, y, pageContainer,fieldValues[fieldName] || "");
       // }
        // else {
            if (fieldValues[fieldName]) {
                let textValue = fieldValues[fieldName];
                ctx.fillText(textValue, x, y);
            }
       // }
    });
}

function createSignatureCanvas(x, y, width, height, ctx, pageContainer) {
    let scaleFactor = 1.5; 
    let scaledWidth = width * scaleFactor;
    let scaledHeight = height * scaleFactor;

    let rect = ctx.canvas.getBoundingClientRect();
    let scaleX = ctx.canvas.width / rect.width; 
    let scaleY = ctx.canvas.height / rect.height;
    
    let adjustedX = x / scaleX;
    let adjustedY = y / scaleY;

    let signatureWrapper = document.createElement("div");
    signatureWrapper.style.position = "absolute";
    signatureWrapper.style.left = `${adjustedX}px`;
    signatureWrapper.style.top = `${adjustedY}px`;
    signatureWrapper.style.width = `${scaledWidth}px`;
    signatureWrapper.style.height = `${scaledHeight + 30}px`; 
    signatureWrapper.style.display = "flex";
    signatureWrapper.style.flexDirection = "column";
    signatureWrapper.style.alignItems = "center";
    signatureWrapper.style.zIndex = "1000";

    let signatureDiv = document.createElement("div");
    signatureDiv.style.width = `${scaledWidth}px`;
    signatureDiv.style.height = `${scaledHeight}px`;
    signatureDiv.style.border = "2px solid black";
    signatureDiv.style.backgroundColor = "transparent";
    signatureDiv.style.display = "flex";
    signatureDiv.style.alignItems = "center";
    signatureDiv.style.justifyContent = "center";
    signatureDiv.style.fontFamily = "'Dancing Script', cursive";
    signatureDiv.style.fontWeight = "bold";
    signatureDiv.style.fontSize = "24px";
    signatureDiv.style.color = "#333"; 
    signatureDiv.style.textAlign = "center";
    signatureDiv.style.overflow = "hidden";
    signatureDiv.style.cursor = "text";
    signatureDiv.contentEditable = true;

    let buttonContainer = document.createElement("div");
    buttonContainer.style.marginTop = "3px";
    buttonContainer.style.display = "flex";
    buttonContainer.style.gap = "5px";

    let saveBtn = document.createElement("button");
    saveBtn.innerText = "Save After Write";

    let uploadBtn = document.createElement("button");
    uploadBtn.innerText = "Upload From External";

    let fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "image/png, image/jpeg";
    fileInput.style.display = "none";

    saveBtn.addEventListener("click", function () {
        if (signatureDiv.innerText.trim() === "") {
            alert("Please enter a signature before saving.");
            return;
        }
        signatureDiv.contentEditable = false;
        signatureDiv.style.border = "none";
        saveBtn.style.display = "none";
        uploadBtn.style.display = "none";
        fileInput.style.display = "none";
    });

    uploadBtn.addEventListener("click", function () {
        fileInput.click();
    });

    fileInput.addEventListener("change", function (event) {
        let file = event.target.files[0];
        if (file) {
            let reader = new FileReader();
            reader.onload = function (e) {
                let img = new Image();
                img.src = e.target.result;
                img.style.width = "100%";
                img.style.height = "100%";
                img.style.objectFit = "contain";
                signatureDiv.innerHTML = "";
                signatureDiv.appendChild(img);
            };
            reader.readAsDataURL(file);
        }
    });

    buttonContainer.appendChild(saveBtn);
    buttonContainer.appendChild(uploadBtn);
    signatureWrapper.appendChild(signatureDiv);
    signatureWrapper.appendChild(buttonContainer);
    signatureWrapper.appendChild(fileInput);
    pageContainer.appendChild(signatureWrapper);
}

function createDateInputField(x, y, width, height, initialValue, pageContainer) {
    let inputWrapper = document.createElement("div");
    inputWrapper.style.position = "absolute";
    inputWrapper.style.left = `${x}px`;
    inputWrapper.style.top = `${y}px`;
    inputWrapper.style.display = "flex";
    inputWrapper.style.alignItems = "center";
    inputWrapper.style.gap = "5px";

    let dateInput = document.createElement("input");
    dateInput.type = "date";
    dateInput.value = initialValue;
    dateInput.style.width = "120px";
    dateInput.style.height = "30px";
    dateInput.style.border = "1px solid black";
    dateInput.style.borderRadius = "5px";
    dateInput.style.textAlign = "center";
    dateInput.style.fontSize = "14px";
    dateInput.style.padding = "4px";
    
    let saveButton = document.createElement("button");
    saveButton.innerText = "Save";
    saveButton.style.height = "34px";
    saveButton.style.padding = "5px 12px";
    saveButton.style.cursor = "pointer";
    saveButton.style.backgroundColor = "#4CAF50";
    saveButton.style.color = "white";
    saveButton.style.border = "none";
    saveButton.style.borderRadius = "5px";
    saveButton.style.fontSize = "14px";
    saveButton.style.display = "inline-flex"; 
    saveButton.style.alignItems = "center";

    let displayText = document.createElement("span");
    displayText.style.fontSize = "16px";
    displayText.style.fontWeight = "bold";
    displayText.style.display = "none";

    saveButton.addEventListener("click", function () {
        let selectedDate = dateInput.value;
        if (selectedDate) {
            let formattedDate = new Date(selectedDate).toLocaleDateString("en-GB");
            displayText.innerText = formattedDate;
            displayText.style.display = "inline"; 
            dateInput.style.display = "none";
            saveButton.style.display = "none"; 
        }
    });

    inputWrapper.appendChild(dateInput);
    inputWrapper.appendChild(saveButton);
    inputWrapper.appendChild(displayText);
    pageContainer.appendChild(inputWrapper);
}

function createCheckboxField(x, y, pageContainer, initialValue) {
    let checkboxWrapper = document.createElement("div");
    checkboxWrapper.style.position = "absolute";
    checkboxWrapper.style.left = `${x}px`;
    checkboxWrapper.style.top = `${y}px`;
    checkboxWrapper.style.display = "flex";
    checkboxWrapper.style.alignItems = "center";
    checkboxWrapper.style.zIndex = "1000";

    let checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.checked = initialValue === "true";
    checkbox.style.width = "20px";
    checkbox.style.height = "20px";
    checkbox.style.cursor = "pointer";
    checkbox.style.marginRight = "5px";

    let saveButton = document.createElement("button");
    saveButton.innerText = "Save";
    saveButton.style.marginLeft = "5px";
    saveButton.style.padding = "5px px";
    saveButton.style.backgroundColor = "black";
    saveButton.style.color = "white";
    saveButton.style.border = "none";
    saveButton.style.cursor = "pointer";
    saveButton.style.borderRadius = "2px";

    let displayValue = document.createElement("div");
    displayValue.style.fontSize = "20px"; 
    displayValue.style.fontWeight = "bold";
    displayValue.style.color = "blue";
    displayValue.style.display = "none";

    saveButton.addEventListener("click", function () {
        if (checkbox.checked) {
            displayValue.innerHTML = "✔";
            displayValue.style.display = "block";
        } else {
            displayValue.innerHTML = "";
            displayValue.style.display = "none";
        }
        checkboxWrapper.innerHTML = ""; 
        checkboxWrapper.appendChild(displayValue);
    });

    checkboxWrapper.appendChild(checkbox);
    checkboxWrapper.appendChild(saveButton);
    pageContainer.appendChild(checkboxWrapper);
}

function handleSaveClick() {
    if (pdfIdArray.length === 0) {
        alert("No PDF IDs found!");
        return;
    }
    let recordId = getParameterByName("recordIds");
    if (!recordId) {
        alert("No Record ID found!");
        return;
    }
    
    let siteUrl = "https://buyusarealty--expcloud.sandbox.my.salesforce-sites.com/pagePreview";
    let pdfIdsParam = encodeURIComponent(pdfIdArray.join(","));
    let finalUrl = `${siteUrl}?pdfIds=${pdfIdsParam}&recordIds=${encodeURIComponent(recordId)}`;

    window.open(finalUrl, '_blank');

    let collectedConfigJson = [];

    pdfIdArray.forEach(pdfId => {
        let pdfConfig = localStorage.getItem(`pdfConfig_${pdfId}`);
        console.log('pdfConfig__>',pdfConfig);
        if (pdfConfig) {
            collectedConfigJson.push(JSON.parse(pdfConfig));
        }
    });

    if (collectedConfigJson.length === 0) {
        alert("No configuration found!");
        return;
    }

    let finalConfigJson = JSON.stringify(collectedConfigJson);

    Visualforce.remoting.Manager.invokeAction(
        "{!$RemoteAction.DocumentConfigApexController.savePDFConfigAfterPreview}",
        recordId,
        finalConfigJson,
        function(result, event) {
            if (event.status) {
                if (result === "Success") {
                    alert("Configuration saved successfully!");
                } else {
                    alert("Error: " + result);
                }
            } else {
                console.error("Error saving config", event);
            }
        },
        { escape: false }
    );
}

function openEmailPopup() {
            document.getElementById("emailPopup").style.display = "block";

            let recordId = getParameterByName("recordIds");
            
            if (!recordId) {
                alert("No Record ID found!");
                return;
            }

            // Salesforce Apex Call
            Visualforce.remoting.Manager.invokeAction(
                "{!$RemoteAction.DocumentConfigApexController.getContactEmail}",
                recordId,
                function(result, event) {
                    if (event.status && result) {
                        console.log('EmailTo>>>>',result);
                        document.getElementById("emailTo").value = result; 
                    } else {
                        console.error("Error fetching email:", event.message);
                    }
                },
                { escape: false }
            );

            let siteUrl = "https://buyusarealty--expcloud.sandbox.my.salesforce-sites.com/pagePreview";
            let pdfIdsParam = encodeURIComponent(pdfIdArray.join(","));
            let finalUrl = `${siteUrl}?pdfIds=${pdfIdsParam}&recordIds=${encodeURIComponent(recordId)}`;

            let emailBodyElement = document.getElementById("emailBody");
            emailBodyElement.value = `${finalUrl}`;
        }

        function closeEmailPopup() {
            document.getElementById("emailPopup").style.display = "none";
        }

    function sendEmail() {
    let emailTo = document.getElementById("emailTo").value;
    let emailSubject = document.getElementById("emailSubject").value;
    let emailBody = document.getElementById("emailBody").value;
    let recordId = getParameterByName("recordIds");

    if (!emailTo) {
        alert("Please enter an email address.");
        return;
    }

    if (!recordId) {
        alert("No Record ID found!");
        return;
    }

    let siteUrl = "https://buyusarealty--expcloud.sandbox.my.salesforce-sites.com/pagePreview";
    let pdfIdsParam = encodeURIComponent(pdfIdArray.join(","));
    let finalUrl = `${siteUrl}?pdfIds=${pdfIdsParam}&recordIds=${encodeURIComponent(recordId)}`;

    // Append the URL as a clickable link
    let fullEmailBody = `${emailBody}\n<a href="${finalUrl}" target="_blank">${finalUrl}</a>`;
    console.log("Email Body:", fullEmailBody); // Debugging output

}
function sendEmail() {
        let emailTo = document.getElementById("emailTo").value;
        let emailSubject = document.getElementById("emailSubject").value;
        let emailBody = document.getElementById("emailBody").value;

        if (!emailTo) {
            alert("Please enter an email address.");
            return;
        }
        Visualforce.remoting.Manager.invokeAction(
            "{!$RemoteAction.DocumentConfigApexController.sendEmail}",
            emailTo, emailSubject, emailBody,
            function(result, event) {
                console.log('Result::>',result);
                if (event.status && result.includes("Success")) {
                    alert("Email Sent Successfully!");
                    console.log(result);
                } else {
                    alert("Error Sending Email: " + result);
                    console.error("Error:", event.message);
                }
            },
            { escape: false }
        );
    }

</script>
    
    <style>

        #pdfContainer {
        width: 100%;
        height: 100vh;
        overflow-y: auto;
        border: 5px solid #333;
        border-radius: 5px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.3);
        padding: 10px;
        background: #f9f9f9;
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        }
        
        .pdf-page {
        border: 1px solid #3f3b3b;
        background: white;
        position: relative;
        margin-bottom: 10px;
        }
        
        .pdf-canvas {
        width: 100%;
        height: auto;
        }
        .popup {
       display: none;
       position: fixed;
       z-index: 1000; /* Ensure it's above other elements */
       left: 50%;
       top: 50%;
       transform: translate(-50%, -50%);
       width: 400px;
       background: white;
       padding: 20px;
      border-radius: 8px;
     box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.3);
}
    .popup-content {
        display: flex;
        flex-direction: column;
    }
    .popup label {
        margin-top: 10px;
    }
    .popup input, .popup textarea {
        width: 100%;
        padding: 5px;
        margin-top: 5px;
    }
    .popup .close {
        position: absolute;
        top: 10px;
        right: 15px;
        cursor: pointer;
        font-size: 18px;
    }
    .send-email-btn {
        margin-top: 10px;
        padding: 8px;
        background: blue;
        color: white;
        border: none;
        cursor: pointer;
    }
    </style>
</apex:page>
